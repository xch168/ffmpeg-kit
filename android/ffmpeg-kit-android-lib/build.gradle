apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.arthenica.ffmpegkit'
    }
    compileSdk 33
    ndkVersion "22.1.7171670"

    defaultConfig {
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "0.0.1"
        project.archivesBaseName = "ffmpeg-kit"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["../libs"]
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            systemProperty 'enable.ffmpeg.kit.test.mode', 'true'
        }
    }

    lint {
        // 不因为警告而中止构建
        abortOnError false
        // 忽略测试源文件中的lint问题
        ignoreTestSources true
        // 只检查严重错误
        checkReleaseBuilds false
        // 创建baseline文件来跟踪现有的lint问题
        baseline = file("lint-baseline.xml")
    }

    publishing {
        singleVariant('release') {
            withJavadocJar()
            withSourcesJar()
        }
    }
}

task javadoc(type: Javadoc) {
    title = 'FFmpegKit'
    destinationDir = file("${projectDir}/../../docs/android/javadoc")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    source = android.sourceSets.main.java.srcDirs
    configurations.implementation.setCanBeResolved(true)
    classpath += configurations.implementation
}

dependencies {
    api 'com.arthenica:smart-exception-java:0.2.1'
    testImplementation "androidx.test.ext:junit:1.1.5"
    testImplementation 'org.json:json:20230618'
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up later
            groupId 'io.github.xch168'
            artifactId 'ffmpeg-kit-android'
            version project.version ?: "0.0.1"

            // Two artifacts, the `aar` (or `jar`) and the sources
            afterEvaluate {
                from components.release
            }

            pom {
                name = 'FFmpeg Kit Android'
                description = 'FFmpeg Kit for Android. Supports Android API Level 24+.'
                url = 'https://github.com/xch168/ffmpeg-kit'
                
                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE, Version 3'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                        distribution = 'repo'
                    }
                }
                
                developers {
                    developer {
                        id = 'xch168'
                        name = 'xch168'
                        email = 'kemp.xu@foxmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:https://github.com/xch168/ffmpeg-kit.git'
                    developerConnection = 'scm:git:https://github.com/xch168/ffmpeg-kit.git'
                    url = 'https://github.com/xch168/ffmpeg-kit'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username System.getenv("MAVEN_CENTRAL_USERNAME") ?: project.findProperty("mavenCentralUsername")
                password System.getenv("MAVEN_CENTRAL_PASSWORD") ?: project.findProperty("mavenCentralPassword")
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    
    def signingKey = System.getenv("SIGNING_KEY") ?: project.findProperty("signingKey")
    def signingPassword = System.getenv("SIGNING_PASSWORD") ?: project.findProperty("signingPassword")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.release
    }
}
